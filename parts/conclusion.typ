= Заключение <nonumber>

В результате работы предложен метод автоматического извлечения поведенческих моделей библиотек из открытых программных репозиториев. Метод заключается в применении статических и динамических подходов к полученным с GitHub или Maven Central Repository проектам для извлечения трасс и последующем применении алгоритма восстановления КА. Для апробации метода реализован инструмент, позволяющий запускать автоматические сценарии для получения поведенческих моделей в виде КА и предоставляющий элементы управления настройками поиска, анализа, восстановления и используемого окружения. 

Результат исследования показал применимость предложенного подхода. С помощью поиска по GitHub и Maven Central Repository была решена задача получения общедоступных программ, использующих заданную библиотеку. Для извлечение трасс применены статический и динамический анализ. Статический заключается в обходе ICFG и применении Points-to анализа на основе алгоритма Андерсена, а динамический -- в инструментации и запуске тестов или фаззинга входных точек в программу на основе Jazzer. Восстановление поведенческих моделей выполнено с применением алгоритма k-tail, реализованного в рамках инструмента MINT.

Представленный метод и инструмент требуют дальнейшего развития в нескольких направлениях. 

Одна из проблем в том, что получаемые КА являются грубой аппроксимацией сверху и на сложных библиотеках имеют мало общего с истинными поведенческими моделями. Это является следствием используемого алгоритма восстановления и игнорирования состояния программы, включая значения аргументов. Для решения этого необходимо провести работу над инструментацией, реализовав сбор значений аргументов и доступных в контексте переменных. Это позволит применять более сложные алгоритмы восстановления, обеспечивающие лучшую обобщенность и полноту модели. При этом важно сохранить простоту применения инструментации для работы в автоматическом режиме. Другой способ получения информации о состоянии программы, причем сразу в форме предикатов -- использование символьного исполнения, но это также предмет для отдельного исследования.

Ещё одна проблема, требующая решения -- отсутствие тестов в проектах, их малое количество или плохая репрезентативность в контексте получаемых трасс. В данной работе для решения этой проблемы применяется фаззинг, но, вероятно, лучший результат покажет генерация тестов, направленная на получение трасс, содержащих поведение заданной библиотеки (схожее с Tautoko). Однако это отдельная сложная задача, требующая соответствующего исследования. 

Сильным ограничением для автоматизации динамических методов является зависимость программ от определенного внешнего окружения -- баз данных, стороннего ПО, переменных окружения. Идеальным решением этого была бы имитация поведения подобного кода, интегрированная в задачу генерации тестов. Это обеспечит высокую долю успешно исполняемых тестов. На текущий момент нет инструментов, позволяющих это осуществить -- в связи со сложностью решения и узким направлением его применения, актуален вопрос релевантности исследований по данной теме.

Несмотря на указанные недостатки, требующие дальнейшего развития и дополнительных исследований, предложенный метод является комплексным решением задачи получения поведенческих моделей. При этом для его применения требуется сравнительно небольшое участие человека. Что касается необходимости вручную обрабатывать полученные КА -- это ограничение всех существующих подходов к восстановлению, на данный момент не имеющее другого решения, кроме использования различных алгоритмов и экспериментирования с настройкой их параметров. Хочется надеяться, что инструменты, позволяющие автоматизировать получение поведенческих моделей, в будущем смогут улучшить опыт разработки и применения анализов, основанных на использовании формальных спецификаций. 
